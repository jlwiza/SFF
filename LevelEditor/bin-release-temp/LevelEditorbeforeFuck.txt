package
{
	import com.jonLwiza.engine.Main;
	import com.jonLwiza.engine.actors.MainStage;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.BlendMode;
	import flash.display.Graphics;
	import flash.display.Loader;
	import flash.display.Sprite;
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	import flash.events.Event;
	import flash.events.IEventDispatcher;
	import flash.events.MouseEvent;
	import flash.events.StatusEvent;
	import flash.filesystem.File;
	import flash.geom.ColorTransform;
	import flash.geom.Matrix;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import flash.geom.Vector3D;
	import flash.net.LocalConnection;
	import flash.net.URLRequest;
	import flash.text.TextField;
	import flash.text.TextFormat;
	
	import mx.core.BitmapAsset;
	
	import adobe.utils.MMExecute;
	
	import away3d.cameras.Camera3D;
	import away3d.cameras.lenses.PerspectiveLens;
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.containers.View3D;
	import away3d.controllers.FollowController;
	import away3d.controllers.HoverController;
	import away3d.controllers.LookAtController;
	import away3d.core.managers.Stage3DManager;
	import away3d.core.managers.Stage3DProxy;
	import away3d.debug.AwayStats;
	import away3d.entities.Mesh;
	import away3d.entities.SegmentSet;
	import away3d.events.Stage3DEvent;
	import away3d.materials.ColorMaterial;
	import away3d.materials.TextureMaterial;
	import away3d.primitives.CubeGeometry;
	import away3d.primitives.LineSegment;
	import away3d.primitives.WireframePlane;
	import away3d.textures.BitmapTexture;
	
	import awayphysics.collision.shapes.AWPBoxShape;
	import awayphysics.debug.AWPDebugDraw;
	import awayphysics.dynamics.AWPDynamicsWorld;
	import awayphysics.dynamics.AWPRigidBody;
	
	import starling.core.Starling;
	import starling.utils.Color;
	
	
	
	//oa3c of starling
	[SWF(frameRate="60", width="848", height="480")]		
	public class LevelEditor extends Sprite 
	{
		
		[Embed(source="Circle.png", mimeType="image/png")]
		private var BrushBm : Class;
		// I changed this from Bitmap Asset im not sure why it was that to begin with but uh seems to be working fine
		private var _brushPart:Bitmap = new BrushBm();
		private var _brush2Part:Bitmap = new BrushBm();
		
		private var _canvas : Sprite;
		private static var _brush : Sprite;
		private static var scale_brush:Number = .6;
		private static var canvWidth:Number = 550;
		private static var canvHeight:Number = 400;		
		public static var bmd:BitmapData =new BitmapData(canvWidth,canvHeight, true, 0x0);
		public static var bm:Bitmap = new Bitmap(bmd)
		private var oldLoc:Point = new Point();
		private var _mask:Sprite;
		
		// Stage manager and proxy instances
		private var stage3DManager : Stage3DManager;
		private var stage3DProxy : Stage3DProxy;
		
		// Away3D view instances
		public static var away3dView : View3D;
		
		// Camera controllers 
		public static var camera3D : LookAtController;
		
		// Materials
		private var cubeMaterial : TextureMaterial;
		
		// Objects
		private var cube1 : Mesh;
		private var cube2 : Mesh;
		private var cube3 : Mesh;
		private var cube4 : Mesh;
		private var cube5 : Mesh;
		
		// Runtime variables
		private var lastPanAngle : Number = 0;
		private var lastTiltAngle : Number = 0;
		private var lastMouseX : Number = 0;
		private var lastMouseY : Number = 0;
		private var mouseDown : Boolean;
		private var renderOrderDesc : TextField;
		
		
		// Starling instances
		private var featherMain:Starling;
		private var game:Starling;
		
		private var cAlph:ColorTransform;
		private var achnl:Number = .8;
		private static var cAlph2:ColorTransform;
		private var achnl2:Number = .9;
		public static var renderOrder : int = 3;
		//private var gameState:int = 0;
		
		// Constants
		public static const AWAY:int = 0;
		public static const GAME:int = 1;
		public static const FEATHER_AWAY:int = 2;
		public static const FEATHER_GAME:int = 3;
		public static const PAUSE:int = 4;
		public static const AWAY_GAME:int = 5;
		public static var playing:Boolean = true;
		
		//		public var methodName:String = "sendPenInfoFromHtml";
		//		
		//		public var method:Function = recievePenInfoFromHtml;
		//		public var wasSuccessful:Boolean = ExternalInterface.addCallback(methodName, method)
		//		public var sendOff:String = "sendOffFromHtml";
		//		
		//		public var recieveOff:Function = HtmlturnOffCanvas;
		//		public var tOffwasSuccessful:Boolean = ExternalInterface.addCallback(sendOff, recieveOff)
		//		
		
		//***UGGHH THIS NEEDS TO BE CLEANED UP
		private var img1Loader:Loader;
		private var canvX:int;
		private var canvY:int;
		private var canvasOn:Boolean = true;
		private var painting:Boolean = true;
		private var oldBit:BitmapData;
		public static var conn:LocalConnection;
		private static var coolDown:int;
		public static var module:*
		public static var liveEdit:Boolean = false;
		private var count:int = 0;
		public static var eraser:Boolean;
		public static var brushScale:Number = 1;
		private var _scene:Scene3D;

		private const _debug:Boolean = false;
//		private var _debugDraw:AWPDebugDraw;
//		public static  var _physicsWorld:AWPDynamicsWorld;
		private var startthis:Boolean = false;
		public static var awyCam:Camera3D;

		public static var testthing12:Vector3D;
		public static var lookAtTarget:ObjectContainer3D = new ObjectContainer3D;
		public static var isFollowPath:Boolean = true;
		private var once:Boolean = false;
		public static var onPath:Boolean = true;
		private var oldRot:Number;
		public static var perpRtYCos:Number;
		public static var perpRtYSin:Number;
		public function LevelEditor()
		{
			conn = new LocalConnection();
			
			var fl:File = new File(File.userDirectory.nativePath+"/Google Drive/StarlingProject/")
			trace(fl.url)
			trace(fl.url)
			trace(fl.url)
			trace(fl.url)
			
			// i also commented this next 2 line out
			conn.client = this
			conn.allowDomain("*");
			// I comment this out cuz if you test it itll mess up sometimes
			conn.connect("_modeServer");
			
			// I added these 2 lines
//			conn.addEventListener(StatusEvent.STATUS, onLcStatus)
//
//			conn.send("_modeServer", "moduleUpdate");

			//_bambooDockBridge = new BambooMiniImpl(this, new FlashFactory(new ChromeSettings(false)));
			
			// this is all you need its pretty awesom and you can put it anywhere
			////trace(BambooMiniGlobals.tabletState.penPressure);
			
			init();
			//var star:Starling = new Starling(FeatherMain, stage)
			//star.start();
			//your paintness
			
			// this is the brush
			addEventListener(Event.ADDED_TO_STAGE, ready);
			
			
		}
		
		public function test():void{
			var jsfl:String = new String();
			var ptx:Number = 700
			jsfl += "fl.getDocumentDOM().getTimeline().layers[0].frames[0].elements[0].x= "+ptx.toString()+";";
			//jsfl += "fl.getDocumentDOM().getTimeline().layers[0].frames[0].elements[0].y= "+pty.toString()+";";
			MMExecute(jsfl);
		}
		
		protected function onLcStatus(event:StatusEvent):void
		{
			//trace("on LcStatus:", event.code)
		}
		public function moduleUpdate():void{
			
			
			trace("yo ma")
			if(coolDown == 0){
			//	var fl:File = new File(File.userDirectory.nativePath+"/Google Drive/Module/bin-debug/Module.swf")
				var fl:File = new File(File.userDirectory.nativePath+"/AppData/Local/Adobe/Animate CC 2017/en_US/Configuration/WindowSWF/Module1.swf")

				var img1Request:URLRequest = new URLRequest(fl.url);
				img1Loader = new Loader();
				img1Loader.contentLoaderInfo.addEventListener(Event.COMPLETE, complete);
				//img1Loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, complete);
				img1Loader.load(img1Request);
				
				coolDown = 30
				conn.close()
			}else{
				//trace("failure")
			}
		}
		
		protected function complete(event:Event):void
		{
			//trace("update complete")
			module = img1Loader.content
//				count++
//					if(count == 2)
//					throw Error("complete error")
			// go through and find all the modules in the scene
			// update set their modules, and check if they
			// want to use the live version
			// actually just take the scene sonic is in
			// you dont use multiple scenes to control
			// everything, scenes alter sonics behaviour
			// in some shape or form if not its just an assets
			// actor or scenary, this way they can still be updated
			// without being wasteful
			Main.liveCamera.hero_mc.currScene[0].setModule()
		}
		public static function update():void
		{
			if(coolDown> 0)
				coolDown --;
		}
		protected function ready(event:Event):void
		{
			removeEventListener(Event.ADDED_TO_STAGE, ready);
			
			_brush = new Sprite();
			_mask = new Sprite();
			//_brush.blendMode = BlendMode.ERASE
			
			cAlph = new ColorTransform(1,1,1,achnl);
			cAlph2 = new ColorTransform(1,1,1,achnl2);
			
			_brush.scaleX = scale_brush
			_brush.scaleY = scale_brush
			_brush.addChild(_brushPart)
			_brush.cacheAsBitmap = true;
			
			addChild(bm)
			_mask.addChild(_brush2Part)
			canvX = 100;
			canvY = 100;
			bm.x = canvX;
			bm.y = canvY;
			
			//turnOnCanvas(canvX,canvY, 1,1);
			
			_mask.alpha = .5;
			
			this.blendMode = BlendMode.LAYER
			// this shit is such a mess ughjahljkdsahf;d f
			if(false)
				stage.addEventListener(MouseEvent.MOUSE_MOVE, touchEvent);
		}
		
		//		public function turnOffCanvas():void 
		//		{
		//			
		//			ExternalInterface.call("removeCanvas");	
		//		}
		//		public function HtmlturnOffCanvas():void 
		//		{
		//			
		//			EditKeyHandler.camvas = false;
		//		}
		//		
		//		public function turnOnCanvas(x:Number, y:Number, width:Number, height:Number):void 
		//		{
		//			ExternalInterface.call("addCanvas",x,y,width,height);	
		//		}
		//		public function EditCanvasDimensions(x:Number, y:Number, width:Number, height:Number):void 
		//		{
		//			ExternalInterface.call("editCanvas",x,y,width,height);	
		//		}
		
		//		public function removeCanvas():void 
		//		{
		//			EditCanvasDimensions(0,0,5,5)	
		//		}
		//		public function defaultCanvas():void 
		//		{
		//			EditCanvasDimensions(canvX,canvY, canvWidth,canvHeight);	
		//		}
		
		//		public function recievePenInfoFromHtml(pressure,eraser,mX,mY,hover):void {
		//			//trace(hover);
		//			var location : Point =new Point(mX,mY);
		//			var prevLocation : Point =oldLoc;
		//			oldLoc = location
		//			if(hover)
		//			{
		//				return;
		//			}
		//			//brush.visible = false;
		//			//var location : Point = touch.getLocation(_canvas);
		////						if(prevLocation.x == 0 && prevLocation.y == 0)
		////						{
		////							prevLocation.x = location.x;
		////							prevLocation.y = location.y;
		////							
		////						}
		//			
		//			
		//			var startx:int = prevLocation.x;
		//			var starty:int = prevLocation.y;
		//			var endx:int =  location.x;
		//			var endy:int = location.y;
		//			var delta_x:int;
		//			var delta_y:int;
		//			
		//			var t:int;
		//			var distance:int;
		//			var xerr:int = 0;
		//			var yerr:int = 0;
		//			
		//			var incx:int;
		//			var incy:int;				
		//			
		//			delta_x=endx-startx;
		//			delta_y=endy-starty;
		//			
		//			//				var gap : Number = Math.sqrt((gapX * gapX) + (gapY * gapY));
		//			//				var fillGaps : int = Math.ceil(Math.round(gap) / (_brush.width * .05));
		//			//				
		//			//				for (var i : int = 1; i < fillGaps; i++)
		//			//				{
		//			//					_extraDraws.push(new Point(prevLocation.x + gapX * (i / fillGaps), prevLocation.y + gapY * (i / fillGaps)));
		//			//				}
		//			if(delta_x>0) incx=1;
		//			else if(delta_x==0) incx=0;
		//			else incx=-1;
		//			
		//			if(delta_y>0) incy=1;
		//			else if(delta_y==0) incy=0;
		//			else incy=-1;
		//			
		//			/* determine which distance is greater */
		//			delta_x=Math.abs(delta_x);
		//			delta_y=Math.abs(delta_y);
		//			if(delta_x>delta_y) distance=delta_x;
		//			else distance=delta_y;
		//			
		//			/* draw the line */
		//			for(t=0; t<=distance+1; t++) {
		//				wp(startx, starty,pressure, eraser);
		//				
		//				xerr+=delta_x;
		//				yerr+=delta_y;
		//				if(xerr>distance) {
		//					xerr-=distance;
		//					startx+=incx;
		//				}
		//				if(yerr>distance) {
		//					yerr-=distance;
		//					starty+=incy;
		//				}
		//			}
		//			
		//		}
		
		protected function touchEvent(event:MouseEvent):void
		{
			var location : Point =bm.globalToLocal(new Point(event.localX, event.localY));
			var prevLocation : Point =oldLoc;
			oldLoc = location	
			
			if(!xSheet.frameMarked && EditKeyHandler.State == EditKeyHandler.Animation && bm.bitmapData.rect.containsPoint(location)){

				xSheet.frameMarked = true;
				xSheet.call = 0
				//				var actr:Object = xSheet.frames[xSheet.list.selectedIndex];
				//					if(xSheet.keyFrames[actr.name].indexOf(actr.frame) == -1) // if newDog isn't already in the array
				//					{
				//						xSheet.keyFrames[actr.name].push(actr.frame)
				//					}
				//					else
				//					{
				//						//trace("No, thanks. We've already got that keyframe" );
				//						
				//					}
				//oldBit = bm.bitmapData
			}
			if(!event.buttonDown)
			{
				return;
			}
			//brush.visible = false;
			//var location : Point = touch.getLocation(_canvas);
			//			if(!prevLocation)
			//			{
			//				oldLoc =new Point(event.stageX, event.stageY)
			//					cont=inue
			//			}
			
			
			var startx:int = prevLocation.x;
			var starty:int = prevLocation.y;
			var endx:int =  location.x;
			var endy:int = location.y;
			var delta_x:int;
			var delta_y:int;
			var t:int;
			var distance:int;
			var xerr:int = 0;
			var yerr:int = 0;
			
			var incx:int;
			var incy:int;				
			
			delta_x=endx-startx;
			delta_y=endy-starty;
			//				var gap : Number = Math.sqrt((gapX * gapX) + (gapY * gapY));
			//				var fillGaps : int = Math.ceil(Math.round(gap) / (_brush.width * .05));
			//				
			//				for (var i : int = 1; i < fillGaps; i++)
			//				{
			//					_extraDraws.push(new Point(prevLocation.x + gapX * (i / fillGaps), prevLocation.y + gapY * (i / fillGaps)));
			//				}
			if(delta_x>0) incx=1;
			else if(delta_x==0) incx=0;
			else incx=-1;
			
			if(delta_y>0) incy=1;
			else if(delta_y==0) incy=0;
			else incy=-1;
			
			/* determine which distance is greater */
			delta_x=Math.abs(delta_x);
			delta_y=Math.abs(delta_y);
			if(delta_x>delta_y) distance=delta_x;
			else distance=delta_y;
			
			/* draw the line */
			for(t=0; t<=distance+1; t++) {
				wp(startx, starty,brushScale,eraser);
				
				xerr+=delta_x;
				yerr+=delta_y;
				if(xerr>distance) {
					xerr-=distance;
					startx+=incx;
				}
				if(yerr>distance) {
					yerr-=distance;
					starty+=incy;
				}
			}
			
		}
		public static function wichEV(newLoc:Point, oldLoc:Point):void
		{
			var location : Point =bm.globalToLocal(newLoc);
			var prevLocation : Point =oldLoc;
			oldLoc = location	
			
			if(!xSheet.frameMarked && EditKeyHandler.State == EditKeyHandler.Animation && bm.bitmapData.rect.containsPoint(location)){

				xSheet.frameMarked = true;
				xSheet.call = 0
				//				var actr:Object = xSheet.frames[xSheet.list.selectedIndex];
				//					if(xSheet.keyFrames[actr.name].indexOf(actr.frame) == -1) // if newDog isn't already in the array
				//					{
				//						xSheet.keyFrames[actr.name].push(actr.frame)
				//					}
				//					else
				//					{
				//						//trace("No, thanks. We've already got that keyframe" );
				//						
				//					}
				//oldBit = bm.bitmapData
			}
			
			//brush.visible = false;
			//var location : Point = touch.getLocation(_canvas);
			//			if(!prevLocation)
			//			{
			//				oldLoc =new Point(event.stageX, event.stageY)
			//					cont=inue
			//			}
			
			
			var startx:int = prevLocation.x;
			var starty:int = prevLocation.y;
			var endx:int =  location.x;
			var endy:int = location.y;
			var delta_x:int;
			var delta_y:int;
			var t:int;
			var distance:int;
			var xerr:int = 0;
			var yerr:int = 0;
			
			var incx:int;
			var incy:int;				
			
			delta_x=endx-startx;
			delta_y=endy-starty;
			//				var gap : Number = Math.sqrt((gapX * gapX) + (gapY * gapY));
			//				var fillGaps : int = Math.ceil(Math.round(gap) / (_brush.width * .05));
			//				
			//				for (var i : int = 1; i < fillGaps; i++)
			//				{
			//					_extraDraws.push(new Point(prevLocation.x + gapX * (i / fillGaps), prevLocation.y + gapY * (i / fillGaps)));
			//				}
			if(delta_x>0) incx=1;
			else if(delta_x==0) incx=0;
			else incx=-1;
			
			if(delta_y>0) incy=1;
			else if(delta_y==0) incy=0;
			else incy=-1;
			
			/* determine which distance is greater */
			delta_x=Math.abs(delta_x);
			delta_y=Math.abs(delta_y);
			if(delta_x>delta_y) distance=delta_x;
			else distance=delta_y;
			
			/* draw the line */
			for(t=0; t<=distance+1; t++) {
				wp2(startx, starty,brushScale,eraser);
				
				xerr+=delta_x;
				yerr+=delta_y;
				if(xerr>distance) {
					xerr-=distance;
					startx+=incx;
				}
				if(yerr>distance) {
					yerr-=distance;
					starty+=incy;
				}
			}
			
		}
		
		private function wp(startx:int, starty:int, pressure:Number = 1, eraser:Boolean = false):void
		{
		
			_brush.x = startx - (_brush.width / 2);
			_brush.y = starty - (_brush.height / 2);
			
			var matrix:Matrix = new Matrix();
			matrix.scale(scale_brush*pressure,scale_brush*pressure);
			_brush.alpha = 0;
			//cAlph2.alphaMultiplier = pressure;
			matrix.tx = _brush.x;
			matrix.ty = _brush.y;
			if(!eraser){
				//bm.bitmapData.draw(_brush, matrix,cAlph2, BlendMode.NORMAL);
				//playing = true;//!playing;
				bm.bitmapData.draw(_brush, matrix,new ColorTransform(255,255,255,achnl2), BlendMode.NORMAL);

			}
			else
			{
				if(EditKeyHandler.cpsLock)
				bm.bitmapData.draw(_brush, matrix,new ColorTransform(1,1,1,.5), BlendMode.NORMAL);
				else
				bm.bitmapData.draw(_mask, matrix,cAlph, BlendMode.ERASE);
				
				//playing = false;
			}
			
			
		}
		private static function wp2(startx:int, starty:int, pressure:Number = 1, eraser:Boolean = false):void
		{
		
			_brush.x = startx - (_brush.width / 2);
			_brush.y = starty - (_brush.height / 2);
			
			var matrix:Matrix = new Matrix();
			matrix.scale(scale_brush*pressure,scale_brush*pressure);
			_brush.alpha = 0;
			//cAlph2.alphaMultiplier = pressure;
			matrix.tx = _brush.x;
			matrix.ty = _brush.y;
				bm.bitmapData.draw(_brush, matrix,cAlph2, BlendMode.NORMAL);
				
			
			
		}
		//***************** AWAY STUFFFF!!!!*************************///
		public function init():void
		{
			
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.align = StageAlign.TOP_LEFT;
			
			initProxies();
		}
		private function initProxies():void
		{
			// Define a new Stage3DManager for the Stage3D objects
			stage3DManager = Stage3DManager.getInstance(stage);
			
			// Create a new Stage3D proxy to contain the separate views
			stage3DProxy = stage3DManager.getFreeStage3DProxy();
			stage3DProxy.addEventListener(Stage3DEvent.CONTEXT3D_CREATED, onContextCreated);
			stage3DProxy.antiAlias = 8;
			stage3DProxy.color = 0x333333;
		}
		
		private function onContextCreated(event : Stage3DEvent) : void {
			initPhysicsEngine();
			initAway3D();
			initStarling();
			initMaterials();
			initObjects();
			initButton();
			
			
			addEventListener(Event.ENTER_FRAME, physicsReady, false, 0, true);

			
		}
		
		private function physicsReady(e:Event):void {
			var someCheck:Boolean = true
			if (someCheck) {
				removeEventListener(Event.ENTER_FRAME, physicsReady);
				initListeners();
			}
			
		}
		/**
		 * Initialise the Away3D views
		 */
		private function initAway3D() : void
		{
			// Create the first Away3D view which holds the cube objects.
			away3dView = new View3D();
			_scene = new Scene3D();
			
			away3dView.scene = _scene;
			awyCam = away3dView.camera
			away3dView.camera.lens = new PerspectiveLens(65);
			away3dView.camera.lens.far = 50000;
			away3dView.camera. lens.near = 1;
			
			away3dView.camera.y = 30;
			away3dView.stage3DProxy = stage3DProxy;
			away3dView.shareContext = true;
			//new FollowController(
			//camera3D =  new HoverController(away3dView.camera, lookAtTarget, 180, 0, 900, -15, 30);
			// i'll fix this after
			camera3D = new LookAtController(away3dView.camera, lookAtTarget)
			camera3D.autoUpdate = true;
	
			
			
			
			MainStage.distance = 900
			
			
			
			addChild(away3dView);
			
			if(renderOrder == AWAY || renderOrder ==FEATHER_AWAY || renderOrder == AWAY_GAME )
				addChild(new AwayStats(away3dView));
		}
		
		/**
		 * Initialise the Starling sprites
		 */
		private function initStarling() : void
		{
			// Create the Starling scene to add the checkerboard-background
			game = new Starling(com.jonLwiza.engine.Main, stage, stage3DProxy.viewPort, stage3DProxy.stage3D);
			game.start()
			
			// Create the Starling scene to add the particle effect
		featherMain = new Starling(FeatherMain, stage, stage3DProxy.viewPort, stage3DProxy.stage3D);
//			// you must start it if you want mouse functionality 
			featherMain.start();
			
		}
		
		// testing purposes but you know how that goes but this should really be moved, but its not necessary for this game i dont thingk
		private function initPhysicsEngine():void {
			
//			_physicsWorld = AWPDynamicsWorld.getInstance();
//			_physicsWorld.initWithDbvtBroadphase();
//			_physicsWorld.gravity = new Vector3D(0, -10, 0);
//			
//			if (_debug) {
//				_debugDraw = new AWPDebugDraw(away3dView, _physicsWorld);
//				_debugDraw.debugMode = AWPDebugDraw.DBG_DrawCollisionShapes;
//			}
		}
		/**
		 * Initialise the materials
		 */
		private function initMaterials() : void {
			//Create a material for the cubes
			var cubeBmd:BitmapData = new BitmapData(128, 128, true, 0x0);
			cubeBmd.perlinNoise(7, 7, 5, 12345, true, true, 7, true);
			cubeMaterial = new TextureMaterial(new BitmapTexture(cubeBmd));
			cubeMaterial.gloss = 20;
			cubeMaterial.ambientColor = 0x808080;
			cubeMaterial.ambient = 1;
			
		}
		
		private function initObjects() : void {
			// Build the cubes for view 1
			var cG:CubeGeometry = new CubeGeometry(300, 300, 300);
			
			var colorMaterial:ColorMaterial = new ColorMaterial(0x0000bb,0.5)
			colorMaterial.gloss = 80;
			cube1 = new Mesh(cG, colorMaterial);
			cube2 = new Mesh(cG, cubeMaterial);
			cube3 = new Mesh(cG, cubeMaterial);
			cube4 = new Mesh(cG, cubeMaterial);
			cube5 = new Mesh(cG, cubeMaterial);
			
			// Arrange them in a circle with one on the center
			cube1.x = 2000; 
			cube2.z = -750;
			cube3.x = 750;
			cube4.z = 750;
			cube1.y = cube2.y = cube3.y = cube4.y = cube5.y = 150;
			away3dView.scene.addChild(lookAtTarget)
			
			// Add the cubes to view 1
			
			away3dView.scene.addChild(cube1);
			away3dView.scene.addChild(cube2);
			
			//var cubeShape:AWPBoxShape=new AWPBoxShape(300,300,300);
			//var cubeRigidBody:AWPRigidBody=new AWPRigidBody(cubeShape,cube1,1); // notice the final "1" as it's dynamic
//			_physicsWorld.addRigidBody(cubeRigidBody);
//			cubeRigidBody.friction=1;
			
			//			away3dView.scene.addChild(cube3);
			//			away3dView.scene.addChild(cube4);
			//			away3dView.scene.addChild(cube5);
			away3dView.scene.addChild(new WireframePlane(3000, 3000, 20, 20, 0xbbbbb0, 0.5, WireframePlane.ORIENTATION_XZ));
//			cubeRigidBody.position=new Vector3D(-750,0,0);
		}
		
		/**
		 * Initialise the button to swap the rendering orders
		 */
		private function initButton() : void {
			//			this.graphics.beginFill(0x0, 0.7);
			//			this.graphics.drawRect(0, 0, stage.stageWidth, 60);
			//			this.graphics.endFill();
			//			
			//			var button:Sprite = new Sprite();
			//			button.x = 130;
			//			button.y = 5;
			//			button.addChild(new ButtonBitmap());
			//			button.addEventListener(MouseEvent.CLICK, onChangeRenderOrder);
			//			addChild(button);
			//			
			//			renderOrderDesc = new TextField();
			//			renderOrderDesc.defaultTextFormat = new TextFormat("_sans", 11, 0xffff00);
			//			renderOrderDesc.width = stage.stageWidth;
			//			renderOrderDesc.x = 300;
			//			renderOrderDesc.y = 5;
			//			addChild(renderOrderDesc);
			
			//updateRenderDesc();
		}
		
		/**
		 * Set up the rendering processing event listeners
		 */
		private function initListeners() : void {
			this.stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
			this.stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			
			
			stage3DProxy.addEventListener(Event.ENTER_FRAME, onEnterFrame);
		}
		
		/**
		 * The main rendering loop
		 */
		private function onEnterFrame(event : Event) : void {
			// Update the hovercontroller for view 1
			
			if(awyCam.rotationX !=oldRot){
				perpRtYCos = Math.cos((LevelEditor.awyCam.rotationY+90)*Math.PI/180)
				perpRtYSin = Math.sin((LevelEditor.awyCam.rotationY+90)*Math.PI/180)
				oldRot = awyCam.rotationX 
			}
			testthing12 = away3dView.project(cube1.scenePosition)
				cube1.x=50
				cube1.y=-50
				cube1.z=50
					// this is hackey and dirty considering i have other fixes but its quick and dirty
				// ok isfollow probably refers to the path and we quickly get it to look at sonic for no reason whatsoever
					if(isFollowPath){
						if(!once){
				lookAtTarget.x =Main.liveCamera.hero_mc.X
				lookAtTarget.y =Main.liveCamera.hero_mc.Y
				lookAtTarget.z =Main.liveCamera.hero_mc.Z
					once = true
						}
//		I moved this to main because of errors in processing the camera			
//				LevelEditor.awyCam.z = Main.liveCamera.hero_mc.Z - 900;
//				LevelEditor.awyCam.x = Main.liveCamera.hero_mc.X;
//				LevelEditor.awyCam.y = Main.liveCamera.hero_mc.Y;
					}
				
				MainStage.lookAtTarget.x = lookAtTarget.x
				MainStage.lookAtTarget.y = lookAtTarget.y
				MainStage.lookAtTarget.z = lookAtTarget.z
			//public static var testthing12
					camera3D.autoUpdate = true;
					if(EditKeyHandler.cntrl && EditKeyHandler.qButton){
//						lookAtTarget.x =Main.liveCamera.hero_mc.X
//						lookAtTarget.y =Main.liveCamera.hero_mc.Y
//						lookAtTarget.z =Main.liveCamera.hero_mc.Z
						lookAtTarget.x =0//Main.liveCamera.hero_mc.X
						lookAtTarget.y =0//Main.liveCamera.hero_mc.Y
						lookAtTarget.z =0//Main.liveCamera.hero_mc.Z

						if(!once){
							lookAtTarget.x =Main.liveCamera.hero_mc.X
							lookAtTarget.y =Main.liveCamera.hero_mc.Y
							lookAtTarget.z =Main.liveCamera.hero_mc.Z
//							once = true
						}
						
						LevelEditor.awyCam.z = Main.liveCamera.hero_mc.Z - 900;
						LevelEditor.awyCam.x = Main.liveCamera.hero_mc.X;
						LevelEditor.awyCam.y = Main.liveCamera.hero_mc.Y;
					}
				//camera3D.distance +=3
			//if(startthis)
				//_physicsWorld.step(1/30, 1, 1/30);
			//trace(away3dView.project(cube1.scenePosition).x, away3dView.project(cube1.scenePosition).y,away3dView.project(cube1.scenePosition).z)
			inGameUpdate()
			
			if(EditKeyHandler.imageAlterations)
			EditKeyHandler.InGameCamUpdate()
			
			if (mouseDown) {
				
				if(!playing){
					
					game.stop();
				}else
				{
					
					game.start();
				}
			}
			
			// Update the scenes
			// i think he got the instance so that he could update it in time
			//var starlingCheckerboardSprite:StarlingCheckerboardSprite = StarlingCheckerboardSprite.getInstance();
			//			if (starlingCheckerboardSprite)
			//				starlingCheckerboardSprite.update();
			
			cube1.rotationY = cube2.rotationY = cube3.rotationY = cube4.rotationY +=3
			
			if(!playing){
				
				
				game.render()
				featherMain.render()
				return;
			}
			// Use the selected rendering order
			if (renderOrder == FEATHER_AWAY) {
				
				// Render the Starling animation layer
				//				starlingCheckerboard.nextFrame();
				
				// Render the Away3D layer
				away3dView.render();
				// ill probably forget but uncomment this to get the 3d world back
				// Render the Starling stars layer
				featherMain.nextFrame();
				
				//game.nextFrame()
				
			} else if (renderOrder == FEATHER_GAME) {
				
				away3dView.render();
				
				// Render the Starling animation layer
				if(!EditKeyHandler.camvas){
					if(canvasOn){
						//	turnOffCanvas();
						stage.removeEventListener(MouseEvent.MOUSE_MOVE, touchEvent);
						
						canvasOn = false
					}
					game.nextFrame();
				}else{
					eraser = EditKeyHandler.cntrl
					if(!canvasOn){
						
						//	turnOnCanvas(canvX,canvY, canvWidth,canvHeig ht);
						stage.addEventListener(MouseEvent.MOUSE_MOVE, touchEvent);
						canvasOn = true;
					}
					game.nextFrame();
					//game.render()
					
				}
				
				// Render the Starling stars layer
				featherMain.nextFrame();
			} else if (renderOrder == AWAY){
				
				// Render the Away3D layer
				away3dView.render();
				// Render the Starling animation layer
				//				starlingCheckerboard.nextFrame();
			}else if (renderOrder == GAME){
				
				// Render the game layer
				game.nextFrame();
			}else if (renderOrder == AWAY_GAME){
				away3dView.render();
			
				
				game.nextFrame()
			}
		}
		
		private function inGameUpdate():void
		{
			if (mouseDown ) {
				awyCam.rotationY = 0.3 * (stage.mouseX - lastMouseX) + lastPanAngle;
				awyCam.rotationX = 0.3 * (stage.mouseY - lastMouseY) + lastTiltAngle;
			}
		}
		
		/**
		 * Handle the mouse down event and remember details for hovercontroller
		 */
		private function onMouseDown(event : MouseEvent) : void {
			if(!EditKeyHandler.cpsLock ||EditKeyHandler.State == EditKeyHandler.AWAY_CAM){
			mouseDown = true;
			startthis = true
			
			lastPanAngle = awyCam.rotationY ;
			lastTiltAngle = awyCam.rotationX;
			lastMouseX = stage.mouseX;
			lastMouseY = stage.mouseY;
			}
		}
		
		/**
		 * Clear the mouse down flag to stop the hovercontroller
		 */
		private function onMouseUp(event : MouseEvent) : void {
			mouseDown = false; 
		}
		
		/**
		 * Swap the rendering order 
		 */
		private function onChangeRenderOrder(event : MouseEvent) : void {
			//			if (renderOrder == CHECKERS_CUBES_STARS) {
			//				renderOrder = STARS_CHECKERS_CUBES;
			//			} else if (renderOrder == STARS_CHECKERS_CUBES) {
			//				renderOrder = CUBES_STARS_CHECKERS;
			//			} else {
			//				renderOrder = CHECKERS_CUBES_STARS;
			//			}
			//			
			//			updateRenderDesc();
		}		
		
		/**
		 * Change the text describing the rendering order
		 */
		private function updateRenderDesc() : void {
			var txt:String = "Demo of integrating three framework layers onto a stage3D instance. One Away3D layer is\n";
			txt += "combined with two Starling layers. Click the button to the left to swap the layers around.\n";
			txt += "EnterFrame is attached to the Stage3DProxy - clear()/present() are handled automatically\n";
			txt += "Mouse down and drag to rotate the Away3D scene.\n\n";
			//			switch (renderOrder) {
			//				case CHECKERS_CUBES_STARS : txt += "Render Order (first:behind to last:in-front) : Checkers > Cubes > Stars"; break;
			//				case STARS_CHECKERS_CUBES : txt += "Render Order (first:behind to last:in-front) : Stars > Checkers > Cubes"; break;
			//				case CUBES_STARS_CHECKERS : txt += "Render Order (first:behind to last:in-front) : Cubes > Stars > Checkers"; break;
			//			}
			renderOrderDesc.text = txt;
		}
		
	}
}

