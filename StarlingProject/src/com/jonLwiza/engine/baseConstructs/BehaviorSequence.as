package com.jonLwiza.engine.baseConstructs{	import com.jonLwiza.engine.helperTypes.Status;	public class BehaviorSequence extends Behaviour	{				protected var _childNodes:Array = new Array();		protected var currentChild:Behaviour = new Behaviour();		private var i:uint;		// **needs fixing **/		public function BehaviorSequence(actor:GeneralActor = null)		{			super(actor);			readable = false;		}				override public function initialize():void		{			run = true;			i = 0;			// instead of just saying running to jumping is a good transfer, it says well there is a bunch of spikes over me, so i should either say no i dont wanna, or transfer it			// to a jumpdeath instead of just a regular jump					}				override public function update():String		{			status = TreeUpdate();			if(status == Status.S_SUCCESS)			{				//basically says if were doing something that kills the group like were in air commands, and were grounded dont bother going through each limb				return Status.S_SUCCESS;			}			while(true)			{								if(childNodes[i].actor == null)					childNodes[i].actor = actor;								status = childNodes[i].tick();							// this code is so incredibly adorable i could of never came up with it by myself, too cute for my tastes							if(status != Status.S_SUCCESS)				{										return status;				}						// this may break if it goes out of the loop				i++;				if(i == childNodes.length)				{					//i = 0;					// in here its a bit confusing because i dont know what the general functionality of the thing should be because logically if the thing gets to the end I should know not to call success , but seeing that if i wanted this in a selector itself it makes sense it should call success because the same result will happen it will start over 					return Status.S_SUCCESS				}							}												// update returns a status anything besides invalid, invalid is just so init runs once			return Status.S_INVALId		}				public function TreeUpdate():String		{			// TODO Auto Generated method stub			return null;		}				override public function exit(status:String):void		{					}		public function get childNodes():Array		{			return _childNodes;		}		public function set childNodes(value:Array):void		{			_childNodes = value;		}	}}