package com.jonLwiza.engine.IO{	import com.jonLwiza.engine.helperTypes.Vector3;		import flash.ui.Keyboard;		import starling.display.Sprite;	import starling.events.Event;	import starling.events.KeyboardEvent;
		public class KeyPress extends Sprite	{		private var _direction:Vector3 = new Vector3();		public static var spacebar:Boolean;				private var up:Boolean;		private var down:Boolean;		private var left:Boolean;		private var right:Boolean;		private var directionUpdate:Boolean;		private var spcalled:Boolean = false;								public function KeyPress()		{			super();						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);				}				private function onAddedToStage():void
		{
			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUp);
		}						protected function keyUp(event:KeyboardEvent):void		{			directionUpdate = true;			switch(event.keyCode)			{							case Keyboard.UP ||Keyboard.W :				{					////trace("gfjhgfhjgfjgf");					up = false;																				break;				}								case Keyboard.DOWN||Keyboard.S :				{					down = false;					break;				}									case Keyboard.LEFT||Keyboard.A :				{					left = false;					break;				}				case Keyboard.RIGHT||Keyboard.D :				{					right = false;					break;				}									default:				{					directionUpdate = false;					////trace("not directional")					break;				}			}						switch(event.keyCode)			{				case Keyboard.SPACE:				{					spcalled = false				spacebar = false;				break;				}			}						if(directionUpdate)			UpdateDirection();		}								private function keyDown(event:KeyboardEvent):void		{			directionUpdate = true;			switch(event.keyCode)			{								case Keyboard.UP||Keyboard.W :				{					up = true;					break;				}									case Keyboard.DOWN||Keyboard.S :				{					down = true;					break;				}									case Keyboard.LEFT||Keyboard.A :				{					left = true;					break;				}				case Keyboard.RIGHT||Keyboard.D :				{					right = true;					break;				}								default:				{					directionUpdate = false;					////trace("not directional")					break;				}			}									switch(event.keyCode)			{				case Keyboard.SPACE:				{															if(!spcalled){//						//trace("AAAAAAAAAAAAFFFFFFFFFFJJJJJJJJAKJHEKJRHAKEJHRASHDGKJHAGKHJKHDFLJAHFDKLSJAFHDLKSFAJHDLFKAJHEKLUAHRLKEJHRKJHAKJHkjhalkjrhelakjrhelkajhlJHEALKJREHSLARKJEHLSKAJRHELSKJARHESLKJHKELJRAHEKDSJLRHALEKJHRALKJHDKLSAJFHDSLKJFAHDSLKAJFHDSLAFKUHEKRHLAEKURJHESAKLRJHERLAJEHRAEREAREFDSGDSGDJHLKDAOUHGERHALEUKHDSGLKJEHSDGLKUAHEKLGUHEALKTUHJLEITAUEHTLKSUDAHGDLUKSHGKDJSHADLKSFJHDSKJFHDASLKFJHDLKUFHDAKFJHDLKFJHKJHDFLKJADHFKLDHFLKAUHFKEHRFKEJSDARHLESDAJRHDLSKAJHLDKHGKLUDSHAFKLUBFDSUYLABCEURELRLKEURHSLKRUCHBRALKUDHFKLHFCLKASHUFDKLSAUFHVEAKUHELKRAUVHRKUJEAUHRLKVEUAHVRKELUMHVRS")												spacebar = true;						spcalled = true;					}					break;				}			}						if(directionUpdate)				UpdateDirection();					}						private function UpdateDirection():void		{			if(up && !down)				direction.Y = -1.0;			else if(!up && down)				direction.Y=1.0;			else				direction.Y =0.0;							// if i want to add later I can put if both are being pressed as another like speed thing, nah this multiplies the speed stuff so i cant									if(right && !left)				direction.X = 1.0;			else if(left && !right)				direction.X = -1.0;			else				direction.X = 0.0;		}		public function get direction():Vector3		{			return _direction;		}		public function set direction(value:Vector3):void		{			_direction = value;		}		//		public function test(event:Event):void//		{//			dispatchEvent(new Event(KeyboardHandler.KEYBOARD_COMMAND));//		}					}}